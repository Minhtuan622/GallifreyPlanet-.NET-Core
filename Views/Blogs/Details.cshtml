@model GallifreyPlanet.ViewModels.Blog.BlogManagerViewModel

@{
    ViewData["Title"] = Model.BlogViewModel!.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index" class="text-decoration-none">Bài viết</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.BlogViewModel.Title</li>
        </ol>
    </nav>

    <div class="row g-4">
        <div class="col-lg-8">
            <article class="bg-white rounded-4 shadow-sm overflow-hidden">
                <!-- Hero Image -->
                <div class="position-relative">
                    <img src="@Model.BlogViewModel.CurrentThumbnailPath"
                         class="w-100 object-fit-cover hero-image"
                         alt="@Model.BlogViewModel.Title">
                    <div class="position-absolute bottom-0 start-0 w-100 hero-gradient p-4">
                        <h1 class="text-white mb-3">@Model.BlogViewModel.Title</h1>
                        <div class="d-flex gap-3 text-white opacity-75">
                            <div class="d-flex align-items-center">
                                <i class="far fa-calendar me-2"></i>
                                <span>@Model.BlogViewModel.CreatedAt?.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="far fa-user me-2"></i>
                                <span>@Model.User?.Name</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Content -->
                <div class="p-4">
                    <div class="description p-4 rounded-3 bg-light mb-4">
                        @Model.BlogViewModel.Description
                    </div>
                    <div class="blog-content">
                        @Html.Raw(Model.BlogViewModel.Content)
                    </div>
                </div>
            </article>

            <div class="bg-white rounded-4 shadow-sm overflow-hidden mt-4 p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="h4 mb-0">Bình luận</h3>
                    <button class="btn btn-link text-decoration-none p-0" type="button"
                            data-bs-toggle="collapse" data-bs-target="#commentsSection">
                        <i class="fas fa-chevron-down"></i>
                    </button>
                </div>

                <!-- Comment Form -->
                <div class="card border-0 bg-light mb-4">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Thêm bình luận</h5>
                        <form asp-action="AddComment" asp-route-blogId="@Model.BlogViewModel.Id" method="post">
                            <div class="mb-3">
                                <textarea class="form-control border-0"
                                          rows="3"
                                          name="content"
                                          placeholder="Nhập bình luận của bạn..."
                                          required></textarea>
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary rounded-pill px-4">
                                    <i class="fas fa-paper-plane me-2"></i>Gửi bình luận
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Comments List -->
                <div class="collapse show" id="commentsSection">
                    @if (Model.Comment != null)
                    {
                        <div class="comments-list">
                            @foreach (var comment in Model.Comment)
                            {
                                <div class="comment-item mb-4">
                                    <div class="d-flex">
                                        <!-- User Avatar -->
                                        <div class="avatar-placeholder me-3">
                                            <img src="@comment.User.Avatar"
                                                 alt="@comment.User.Name"
                                                 class="h-100 w-100 object-fit-cover rounded-circle" />
                                        </div>

                                        <!-- Comment Content -->
                                        <div class="flex-grow-1">
                                            <div class="bg-light rounded-4 p-3">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="mb-0">@comment.User.Name</h6>
                                                    @if (comment.UserId == Model.User?.Id)
                                                    {
                                                        <div class="dropdown">
                                                            <button class="btn btn-link text-muted p-0" type="button" data-bs-toggle="dropdown">
                                                                <i class="fas fa-ellipsis-v"></i>
                                                            </button>
                                                            <ul class="dropdown-menu dropdown-menu-end">
                                                                <li>
                                                                    <a class="dropdown-item text-danger" href="#"
                                                                       onclick="deleteComment(@comment.Id)">
                                                                        <i class="fas fa-trash-alt me-2"></i>Xóa
                                                                    </a>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    }
                                                </div>
                                                <p class="mb-1">@comment.Content</p>
                                                <small class="text-muted">
                                                    <i class="far fa-clock me-1"></i>@comment.CreatedAt?.ToString("HH:mm dd/MM/yyyy")
                                                </small>
                                            </div>

                                            <!-- Reply Link -->
                                            <button class="btn btn-link text-decoration-none p-0 mt-2"
                                                    onclick="showReplyForm(@comment.Id)">
                                                <i class="fas fa-reply me-1"></i>Trả lời
                                            </button>

                                            <!-- Replies -->
                                            @if (comment.Replies != null && comment.Replies.Any())
                                            {
                                                <div class="ms-4 mt-3">
                                                    @foreach (var reply in comment.Replies)
                                                    {
                                                        <div class="d-flex mb-3">
                                                            <div class="avatar-placeholder me-2" style="width: 32px; height: 32px;">
                                                                <img src="@reply.User.Avatar"
                                                                     alt="@reply.User.Name"
                                                                     class="h-100 w-100 object-fit-cover rounded-circle" />
                                                            </div>
                                                            <div class="flex-grow-1">
                                                                <div class="bg-light rounded-4 p-2">
                                                                    <div class="d-flex justify-content-between align-items-start">
                                                                        <h6 class="mb-1 fs-6">@reply.User.Name</h6>
                                                                        @if (reply.UserId == Model.User?.Id)
                                                                        {
                                                                            <div class="dropdown">
                                                                                <button class="btn btn-link text-muted p-0" type="button" data-bs-toggle="dropdown">
                                                                                    <i class="fas fa-ellipsis-v"></i>
                                                                                </button>
                                                                                <ul class="dropdown-menu dropdown-menu-end">
                                                                                    <li>
                                                                                        <a class="dropdown-item text-danger" href="#"
                                                                                           onclick="deleteReply(@reply.Id)">
                                                                                            <i class="fas fa-trash-alt me-2"></i>Xóa
                                                                                        </a>
                                                                                    </li>
                                                                                </ul>
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                    <p class="mb-1">@reply.Content</p>
                                                                    <small class="text-muted">
                                                                        <i class="far fa-clock me-1"></i>@reply.CreatedAt?.ToString("HH:mm dd/MM/yyyy")
                                                                    </small>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="text-muted mb-3">
                                <i class="far fa-comments fa-3x"></i>
                            </div>
                            <h5>Chưa có bình luận nào</h5>
                            <p class="text-muted">Hãy là người đầu tiên bình luận về bài viết này!</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

        <div class="col-lg-4">
            <div class="sticky-top" style="top: 5rem;">
                <!-- Author Card -->
                <div class="card border-0 shadow-sm rounded-4 mb-4">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-4">
                            <div class="avatar-placeholder me-3">
                                <img src="@Model.User!.Avatar" alt="Alternate Text" class="h-100 w-100 object-fit-cover rounded-circle" />
                            </div>
                            <div>
                                <h5 class="card-title mb-1">@Model.User?.Name</h5>
                                <p class="text-muted mb-0">
                                    <i class="far fa-envelope me-2"></i>@Model.User?.Email
                                </p>
                            </div>
                        </div>
                        <div class="d-grid gap-2">
                            <a asp-action="Edit" asp-route-id="@Model.BlogViewModel.Id"
                               class="btn btn-primary rounded-pill">
                                <i class="fas fa-edit me-2"></i>Chỉnh sửa bài viết
                            </a>
                            <a asp-action="Index" class="btn btn-light rounded-pill">
                                <i class="fas fa-arrow-left me-2"></i>Quay lại danh sách
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Share Card -->
                <div class="card border-0 shadow-sm rounded-4">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Chia sẻ bài viết</h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary rounded-circle" title="Facebook">
                                <i class="fab fa-facebook-f"></i>
                            </button>
                            <button class="btn btn-outline-info rounded-circle" title="Twitter">
                                <i class="fab fa-twitter"></i>
                            </button>
                            <button class="btn btn-outline-success rounded-circle" title="WhatsApp">
                                <i class="fab fa-whatsapp"></i>
                            </button>
                            <button class="btn btn-outline-secondary rounded-circle" title="Copy Link">
                                <i class="fas fa-link"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

@section Styles {
    <style>
        .hero-image {
            height: 400px;
            object-fit: cover;
        }

        .hero-gradient {
            background: linear-gradient(0deg, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
        }

        .avatar-placeholder {
            width: 48px;
            height: 48px;
        }

        .description {
            font-size: 1.1rem;
            line-height: 1.6;
            font-weight: 500;
        }

        .blog-content {
            font-size: 1.1rem;
            line-height: 1.8;
            color: #2c3e50;
        }

        .blog-content img {
            max-width: 100%;
            height: auto;
            border-radius: 0.5rem;
            margin: 1.5rem 0;
        }

        .blog-content h2,
        .blog-content h3,
        .blog-content h4 {
            margin-top: 2rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .btn-outline-primary,
        .btn-outline-info,
        .btn-outline-success,
        .btn-outline-secondary {
            width: 40px;
            height: 40px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        comment-item {
            transition: background-color 0.2s ease;
        }

        .comment-item:hover {
            background-color: rgba(0, 0, 0, 0.01);
        }

        .comments-list {
            max-height: 800px;
            overflow-y: auto;
        }

        .comments-list::-webkit-scrollbar {
            width: 6px;
        }

        .comments-list::-webkit-scrollbar-thumb {
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 3px;
        }

        .comments-list::-webkit-scrollbar-track {
            background-color: rgba(0, 0, 0, 0.05);
        }

        /* Mobile Responsive */
        @@media (max-width: 768px) {
            .hero-image {
                height: 300px;
            }
        }
    </style>
}

@section Scripts {
    <script>
        function showReplyForm(commentId) {
            // Check if form already exists
            const existingForm = document.querySelector(`#replyForm-${commentId}`);
            if (existingForm) {
                existingForm.remove();
                return;
            }

            // Create reply form
            const replyForm = `
                <div id="replyForm-${commentId}" class="mt-3 ms-4">
                    <form onsubmit="submitReply(event, ${commentId})" class="d-flex gap-2">
                        <input type="hidden" name="commentId" value="${commentId}">
                        <input type="text" name="content" class="form-control form-control-sm"
                               placeholder="Nhập phản hồi của bạn..." required>
                        <button type="submit" class="btn btn-primary btn-sm">Gửi</button>
                    </form>
                </div>
            `;

            // Find the comment item and append the form
            const commentItem = document.querySelector(`[data-comment-id="${commentId}"]`);
            commentItem.insertAdjacentHTML('beforeend', replyForm);
        }

        async function submitReply(event, commentId) {
            event.preventDefault();
            const form = event.target;
            const content = form.content.value;

            try {
                const response = await fetch('/Blog/AddReply', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ commentId, content })
                });

                if (response.ok) {
                    const replyHtml = await response.text();
                    // Find replies container and append new reply
                    const repliesContainer = document.querySelector(`#replies-${commentId}`);
                    repliesContainer.insertAdjacentHTML('beforeend', replyHtml);
                    // Remove reply form
                    document.querySelector(`#replyForm-${commentId}`).remove();
                } else {
                    const error = await response.text();
                    alert(error);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Đã có lỗi xảy ra khi gửi phản hồi');
            }
        }

        // Enhance existing delete functions to remove elements from DOM
        async function deleteComment(commentId) {
            if (confirm('Bạn có chắc chắn muốn xóa bình luận này?')) {
                try {
                    const response = await fetch(`/Blog/DeleteComment/${commentId}`, {
                        method: 'DELETE',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (response.ok) {
                        // Remove comment from DOM
                        document.querySelector(`[data-comment-id="${commentId}"]`).remove();
                    } else {
                        const error = await response.text();
                        alert(error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Đã có lỗi xảy ra khi xóa bình luận');
                }
            }
        }

        async function deleteReply(replyId, commentId) {
            if (confirm('Bạn có chắc chắn muốn xóa phản hồi này?')) {
                try {
                    const response = await fetch(`/Blog/DeleteReply/${replyId}`, {
                        method: 'DELETE',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (response.ok) {
                        // Remove reply from DOM
                        document.querySelector(`[data-reply-id="${replyId}"]`).remove();
                    } else {
                        const error = await response.text();
                        alert(error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Đã có lỗi xảy ra khi xóa phản hồi');
                }
            }
        }
    </script>
}
